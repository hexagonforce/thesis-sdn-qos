###
# This module takes the config/custom/topology_information.yml file and 
# adds all the nodes, hosts and links accordingly.
###

from mininet.net import Mininet
from mininet.node import RemoteController
from mininet.log import setLogLevel, info
import networkx as nx

import yaml
import os

BASEDIR = os.getcwd()
TOPOYML = "{}/config/custom/topology_information.yml".format(BASEDIR)

def dpid(node):
    return int(''.join((c for c in node if c.isdigit())))

def create_network():
    net = Mininet(controller=RemoteController)

    info('*** Adding controller\n')
    net.addController('c0', controller=RemoteController)

    # Get topology from the topology information file as generated by scripts/network_topology.yml
    with open(TOPOYML, 'rb') as yml_file:
        topo = yaml.load(yml_file, Loader=yaml.FullLoader)

    net.addSwitch(topo['core_switch'], protocols=["OpenFlow13"])
    net.addSwitch(topo['server_switch'], protocols=["OpenFlow13"])
    for switch in topo['edge_switches'] + topo['internal_switches']:
        net.addSwitch(switch, protocols=["OpenFlow13"])

    for host in topo['list_clients']:
        net.addHost(host, ip=f'10.0.0.{dpid(host)}')
    for host in topo['list_servers']:
        net.addHost(host, ip=f'10.0.1.{dpid(host)+100}')

    for node1, node2, port1, port2 in topo['edgelist']:
        net.addLink(node1, node2, port1, port2)

    info ('*** Starting network\n')
    net.start()
    return net

def create_network_networkx(G):
    net = Mininet(controller=RemoteController)

    net.addController('c0', controller=RemoteController)

    for node in G:
        if node.startswith('switch'):
            net.addSwitch(node, protocols=["OpenFlow13"])
        elif node.startswith('client'):
            net.addHost(node, ip=f'10.0.0.{dpid(node)}')
        elif node.startswith('server'):
            net.addHost(node, ip=f'10.0.1.{dpid(node) + 100}')

    for u, v, data in G.edges(data=True):
        net.addLink(min(u, v), max(u, v), data['lport'], data['rport'])
    net.start()
    return net

if __name__ == '__main__':
    setLogLevel ('info')
    net = create_network()
    net.stop()

